argv[0] = eq32
argv[1] = --relocatable-memlabels-and-safety
argv[2] = -f
argv[3] = main
argv[4] = prog1.ll
argv[5] = prog2.ll
<MSG>0:00 : Converting LLVM IR bitcode to Transfer Function Graph (TFG) for function main</MSG>
<MSG>0:00 : Converting LLVM IR bitcode to Transfer Function Graph (TFG) for function main</MSG>
<MSG>0:00 : Converting LLVM IR bitcode to Transfer Function Graph (TFG)...</MSG>
<MSG>0:00 : Converting LLVM IR bitcode to Transfer Function Graph (TFG)...</MSG>
<MSG>0:00 : Searching for equivalence at unroll factor 1</MSG>
<MSG>0:00 : Computing equivalence for function: main...</MSG>
<MSG>0:00 : Computing equivalence of the two TFGs (LLVM IR and x86 assembly)...</MSG>
<MSG>0:01 : Chose product-TFG main from a frontier of size 1...</MSG>
<MSG>0:01 : product-TFG main: Enumerating correlations for L0%0%1=>E0%0%1[mu 1, delta 1] starting at L0%0%1_L0%0%1
</MSG>
<MSG>0:01 : Considering 1 paths to src pc E0%0%1 as correlation candidates for L0%0%1=>E0%0%1[mu 1, delta 1] at L0%0%1_L0%0%1
</MSG>
<MSG>0:01 : Attempting correlation of src pathset L0%0%1=>E0%0%1[mu 1, delta 1] as correlation candidate for L0%0%1=>E0%0%1[mu 1, delta 1] at L0%0%1_L0%0%1
</MSG>
<MSG>0:01 : Found 1 feasible correlations for paths to src pc E0%0%1 as correlation candidates for L0%0%1=>E0%0%1[mu 1, delta 1] at L0%0%1_L0%0%1
</MSG>
<MSG>0:01 : product-TFG main: Found 1 correlations for L0%0%1=>E0%0%1[mu 1, delta 1] starting at L0%0%1_L0%0%1
</MSG>
<MSG>0:01 : product-TFG main created 1 possibilities in group main.A...</MSG>
<MSG>0:01 : Chose product-TFG main.A1 from a frontier of size 1...</MSG>
<MSG>0:01 : main.A1: checked newly added edge and inferred invariants...</MSG>
<MSG>0:01 : main.A1: Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:01 : Chosen product-TFG represents our required correlation graph...</MSG>
<MSG>0:01 : Checking equivalence proof...</MSG>
<MSG>0:01 : Equivalence check passed: product CFG has strong enough inductive invariants...</MSG>
<MSG>0:01 : Checking equivalence proof with relocatable memlabels...</MSG>
<MSG>0:01 : Forcing use of abstract memlabel assertions...</MSG>
<MSG>0:01 : Equivalence check passed: product CFG has strong enough inductive invariants...</MSG>
<MSG>0:01 : Equivalence check passed on product CFG with relocatable memlabels...</MSG>
<MSG>0:01 : Check passed on product-CFG...</MSG>
<MSG>0:01 : Safety check passed on product-CFG...</MSG>
<MSG>0:01 : DST Memlabel check passed on product-CFG...</MSG>
Found equivalence proof. Final CG:
EQUIV equivalence check for function main. 0.11s, query:smt.: 0.077854s (num_starts 2), decide_hoare_triple.ce.: 0.042085s (num_starts 13), decide_hoare_triple_helper.: 0.042493s (num_starts 16)
<MSG>0:01 : Successfully computed equivalence for function: main.
</MSG>

expr_simplify_solver: num_starts 45 time spent: 0:0:0 [0.002070]
expr_simplify_syntactic: num_starts 45 time spent: 0:0:0 [0.000302]
expr_linear_relation_holds_visit: num_starts 100 time spent: 0:0:0 [0.000078]
manager_register_object: num_starts 92712 time spent: 0:0:0 [0.038970]
manager_deregister_object: num_starts 1700 time spent: 0:0:0 [0.000772]
expr_do_simplify_helper: num_starts 286 time spent: 0:0:0 [0.003172]
expr_do_simplify_helper_cache: num_starts 286 time spent: 0:0:0 [0.000059]
expr_evaluates_to_constant: num_starts 141 time spent: 0:0:0 [0.000385]
evaluate_expr_and_check_bounds: num_starts 12 time spent: 0:0:0 [0.000233]
total: num_starts 1 time spent: 0:0:0 [0.742447]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: 0.00 per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

Time taken for equivalence check.: 0.097816s (num_starts 1)
Equivalence proof found. The programs are equivalent.
